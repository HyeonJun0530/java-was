Index: src/main/java/codesquad/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package codesquad;\n\nimport codesquad.config.ExecutorServiceConfiguration;\nimport codesquad.http.HttpProcessor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\n\npublic class Main {\n\n    private static final Logger logger = LoggerFactory.getLogger(Main.class);\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8080); // 8080 포트에서 서버를 엽니다.\n        logger.info(\"Listening for connection on port 8080 ....\");\n\n        ExecutorService executorService = ExecutorServiceConfiguration.getExecutorService();\n\n        while (true) { // 무한 루프를 돌며 클라이언트의 연결을 기다립니다.\n            Socket clientSocket = serverSocket.accept(); // 클라이언트 연결을 수락합니다.\n            executorService.submit(new HttpProcessor(clientSocket)); // 클라이언트 요청을 병렬로 처리합니다.\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/codesquad/Main.java b/src/main/java/codesquad/Main.java
--- a/src/main/java/codesquad/Main.java	(revision c398757669a57f68e53b8f13122a08976c386e58)
+++ b/src/main/java/codesquad/Main.java	(date 1720010355094)
@@ -14,6 +14,12 @@
 
     private static final Logger logger = LoggerFactory.getLogger(Main.class);
 
+    /**
+     * TODO: resource mapper를 만들어 주는 것 어떻게 처리할까 고민,
+     * handler 로 핸들링,
+     * 공식문서에 따른 OWS 때문에 trim 쓰는 것과 URI Path 종류 4가지 처리 부분, http 헤더 값 핸들링 부분이 디테일
+     * HttpResponse 리팩터링
+     **/
     public static void main(String[] args) throws IOException {
         ServerSocket serverSocket = new ServerSocket(8080); // 8080 포트에서 서버를 엽니다.
         logger.info("Listening for connection on port 8080 ....");
Index: src/test/java/codesquad/http/HttpResponseTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/codesquad/http/HttpResponseTest.java b/src/test/java/codesquad/http/HttpResponseTest.java
new file mode 100644
--- /dev/null	(date 1720009935208)
+++ b/src/test/java/codesquad/http/HttpResponseTest.java	(date 1720009935208)
@@ -0,0 +1,27 @@
+package codesquad.http;
+
+import codesquad.http.message.HttpResponse;
+import codesquad.http.message.HttpStatus;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class HttpResponseTest {
+
+    @Test
+    @DisplayName("HttpResponse.of() 메서드를 통해 HttpResponse 객체를 생성할 수 있다.")
+    void of() {
+        HttpResponse httpResponse = HttpResponse.of(HttpStatus.OK, "Hello, World!");
+
+        assertEquals("HTTP/1.1 200 OK\r\nContent-Length:13\r\nContent-Type:application/json\r\n\r\nHello, World!", httpResponse.toString());
+    }
+
+    @Test
+    @DisplayName("HttpResponse.ok() 메서드를 통해 HttpResponse 객체를 생성할 수 있다.")
+    void ok() {
+        HttpResponse httpResponse = HttpResponse.ok("Hello, World!");
+
+        assertEquals("HTTP/1.1 200 OK\r\nContent-Length:13\r\nContent-Type:application/json\r\n\r\nHello, World!", httpResponse.toString());
+    }
+}
